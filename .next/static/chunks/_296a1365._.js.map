{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/saul/projects/ronin-rivals/src/lib/waypoint.ts"],"sourcesContent":["import { WaypointProvider } from '@sky-mavis/waypoint';\n\n// Initialize Ronin Waypoint Provider\nexport const waypointProvider = WaypointProvider.create({\n  // Replace with your actual client ID from Ronin Waypoint\n  clientId:\n    process.env.NEXT_PUBLIC_RONIN_WAYPOINT_CLIENT_ID ||\n    '9b577a44-ce2f-44b2-a59d-dfcadfd1a93b',\n  chainId: 2021, // Saigon testnet\n  popupCloseDelay: 4000,\n});\n\n// Wallet connection utilities\nexport const connectWallet = async () => {\n  try {\n    const result = await waypointProvider.connect();\n    return result.address;\n  } catch (error) {\n    console.error('Failed to connect wallet:', error);\n    throw error;\n  }\n};\n\nexport const disconnectWallet = () => {\n  waypointProvider.disconnect();\n};\n\nexport const getConnectedAddress = async (): Promise<string | null> => {\n  try {\n    const accounts = await waypointProvider.request<string[]>({\n      method: 'eth_requestAccounts',\n    });\n    return accounts.length > 0 ? accounts[0] : null;\n  } catch (error) {\n    console.error('Failed to get connected address:', error);\n    return null;\n  }\n};\n\nexport const getBalance = async (address: `0x${string}`): Promise<string> => {\n  try {\n    const balance = await waypointProvider.request<string>({\n      method: 'eth_getBalance',\n      params: [address, 'latest'],\n    });\n    return balance;\n  } catch (error) {\n    console.error('Failed to get balance:', error);\n    throw error;\n  }\n};\n\n// Sign message utility\nexport const signMessage = async (message: string): Promise<string> => {\n  try {\n    const accounts = await waypointProvider.request<string[]>({\n      method: 'eth_requestAccounts',\n    });\n\n    if (!accounts.length) {\n      throw new Error('No accounts connected');\n    }\n\n    const signature = await waypointProvider.request<string>({\n      method: 'personal_sign',\n      params: [message as `0x${string}`, accounts[0] as `0x${string}`],\n    });\n\n    return signature;\n  } catch (error) {\n    console.error('Failed to sign message:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":";;;;;;;;AAMI;AANJ;;AAGO,MAAM,mBAAmB,kLAAA,CAAA,mBAAgB,CAAC,MAAM,CAAC;IACtD,yDAAyD;IACzD,UACE,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,oCAAoC,IAChD;IACF,SAAS;IACT,iBAAiB;AACnB;AAGO,MAAM,gBAAgB;IAC3B,IAAI;QACF,MAAM,SAAS,MAAM,iBAAiB,OAAO;QAC7C,OAAO,OAAO,OAAO;IACvB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF;AAEO,MAAM,mBAAmB;IAC9B,iBAAiB,UAAU;AAC7B;AAEO,MAAM,sBAAsB;IACjC,IAAI;QACF,MAAM,WAAW,MAAM,iBAAiB,OAAO,CAAW;YACxD,QAAQ;QACV;QACA,OAAO,SAAS,MAAM,GAAG,IAAI,QAAQ,CAAC,EAAE,GAAG;IAC7C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO;IACT;AACF;AAEO,MAAM,aAAa,OAAO;IAC/B,IAAI;QACF,MAAM,UAAU,MAAM,iBAAiB,OAAO,CAAS;YACrD,QAAQ;YACR,QAAQ;gBAAC;gBAAS;aAAS;QAC7B;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM;IACR;AACF;AAGO,MAAM,cAAc,OAAO;IAChC,IAAI;QACF,MAAM,WAAW,MAAM,iBAAiB,OAAO,CAAW;YACxD,QAAQ;QACV;QAEA,IAAI,CAAC,SAAS,MAAM,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,YAAY,MAAM,iBAAiB,OAAO,CAAS;YACvD,QAAQ;YACR,QAAQ;gBAAC;gBAA0B,QAAQ,CAAC,EAAE;aAAkB;QAClE;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///home/saul/projects/ronin-rivals/src/lib/contract.ts"],"sourcesContent":["import {\n  createPublicClient,\n  http,\n  parseEther,\n  formatEther,\n  encodeFunctionData,\n} from 'viem';\nimport { saigon } from 'viem/chains';\nimport { waypointProvider } from './waypoint';\n\n// Import the generated ABI from Hardhat compilation\nimport RoninRivalsArtifact from '../../artifacts/contracts/Game.sol/RoninRivals.json';\n\nconst CONTRACT_ABI = RoninRivalsArtifact.abi;\n\n// Contract address - will be set after deployment\nlet CONTRACT_ADDRESS: `0x${string}` | null = null;\n\n// Create public client for read operations\nconst publicClient = createPublicClient({\n  chain: saigon,\n  transport: http(),\n});\n\n// Set contract address after deployment\nexport const setContractAddress = (address: `0x${string}`) => {\n  CONTRACT_ADDRESS = address;\n};\n\n// Contract interaction functions\nexport const createSamurai = async (name: string) => {\n  if (!CONTRACT_ADDRESS) throw new Error('Contract not deployed');\n\n  const data = encodeFunctionData({\n    abi: CONTRACT_ABI,\n    functionName: 'createSamurai',\n    args: [name],\n  });\n\n  const hash = await waypointProvider.request({\n    method: 'eth_sendTransaction',\n    params: [\n      {\n        to: CONTRACT_ADDRESS,\n        data,\n      },\n    ],\n  });\n\n  return hash as string;\n};\n\nexport const upgradeStat = async (stat: number) => {\n  if (!CONTRACT_ADDRESS) throw new Error('Contract not deployed');\n\n  const data = encodeFunctionData({\n    abi: CONTRACT_ABI,\n    functionName: 'upgradeStat',\n    args: [stat],\n  });\n\n  const hash = await waypointProvider.request({\n    method: 'eth_sendTransaction',\n    params: [\n      {\n        to: CONTRACT_ADDRESS,\n        data,\n      },\n    ],\n  });\n\n  return hash as string;\n};\n\nexport const startBattle = async (\n  opponent: `0x${string}`,\n  betAmount: string\n) => {\n  if (!CONTRACT_ADDRESS) throw new Error('Contract not deployed');\n\n  const data = encodeFunctionData({\n    abi: CONTRACT_ABI,\n    functionName: 'startBattle',\n    args: [opponent],\n  });\n\n  const hash = await waypointProvider.request({\n    method: 'eth_sendTransaction',\n    params: [\n      {\n        to: CONTRACT_ADDRESS,\n        value: `0x${parseEther(betAmount).toString(16)}`,\n        data,\n      },\n    ],\n  });\n\n  return hash as string;\n};\n\nexport const executeTurn = async (battleId: bigint) => {\n  if (!CONTRACT_ADDRESS) throw new Error('Contract not deployed');\n\n  const data = encodeFunctionData({\n    abi: CONTRACT_ABI,\n    functionName: 'executeTurn',\n    args: [battleId],\n  });\n\n  const hash = await waypointProvider.request({\n    method: 'eth_sendTransaction',\n    params: [\n      {\n        to: CONTRACT_ADDRESS,\n        data,\n      },\n    ],\n  });\n\n  return hash as string;\n};\n\n// Read functions\nexport const getSamurai = async (playerAddress: `0x${string}`) => {\n  if (!CONTRACT_ADDRESS) throw new Error('Contract not deployed');\n\n  const samurai = await publicClient.readContract({\n    address: CONTRACT_ADDRESS,\n    abi: CONTRACT_ABI,\n    functionName: 'getSamurai',\n    args: [playerAddress],\n  });\n\n  return samurai;\n};\n\nexport const getBattle = async (battleId: bigint) => {\n  if (!CONTRACT_ADDRESS) throw new Error('Contract not deployed');\n\n  const battle = await publicClient.readContract({\n    address: CONTRACT_ADDRESS,\n    abi: CONTRACT_ABI,\n    functionName: 'getBattle',\n    args: [battleId],\n  });\n\n  return battle;\n};\n\nexport const getBattleIdCounter = async () => {\n  if (!CONTRACT_ADDRESS) throw new Error('Contract not deployed');\n\n  const counter = await publicClient.readContract({\n    address: CONTRACT_ADDRESS,\n    abi: CONTRACT_ABI,\n    functionName: 'battleIdCounter',\n  });\n\n  return counter;\n};\n\nexport const getMinimumBet = async () => {\n  if (!CONTRACT_ADDRESS) throw new Error('Contract not deployed');\n\n  const minBet = await publicClient.readContract({\n    address: CONTRACT_ADDRESS,\n    abi: CONTRACT_ABI,\n    functionName: 'MINIMUM_BET',\n  });\n\n  return formatEther(minBet as bigint);\n};\n\nexport const getMaximumBet = async () => {\n  if (!CONTRACT_ADDRESS) throw new Error('Contract not deployed');\n\n  const maxBet = await publicClient.readContract({\n    address: CONTRACT_ADDRESS,\n    abi: CONTRACT_ABI,\n    functionName: 'MAXIMUM_BET',\n  });\n\n  return formatEther(maxBet as bigint);\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///home/saul/projects/ronin-rivals/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  connectWallet,\n  disconnectWallet,\n  getConnectedAddress,\n  getBalance,\n} from '@/lib/waypoint';\nimport {\n  setContractAddress,\n  createSamurai,\n  getSamurai,\n  upgradeStat,\n  startBattle,\n  executeTurn,\n  getBattle,\n} from '@/lib/contract';\n\n// Types\ninterface Samurai {\n  name: string;\n  level: bigint;\n  experience: bigint;\n  skillPoints: bigint;\n  strength: bigint;\n  defense: bigint;\n  speed: bigint;\n  health: bigint;\n  battlesWon: bigint;\n  battlesLost: bigint;\n  exists: boolean;\n}\n\ninterface Battle {\n  player1: `0x${string}`;\n  player2: `0x${string}`;\n  bet: bigint;\n  player1Health: bigint;\n  player2Health: bigint;\n  isActive: boolean;\n  currentTurn: `0x${string}`;\n  turnCount: bigint;\n}\n\nexport default function Home() {\n  const [connectedAddress, setConnectedAddress] = useState<string | null>(null);\n  const [balance, setBalance] = useState<string>('0');\n  const [samurai, setSamurai] = useState<Samurai | null>(null);\n  const [samuraiName, setSamuraiName] = useState('');\n  const [opponentAddress, setOpponentAddress] = useState('');\n  const [betAmount, setBetAmount] = useState('0.01');\n  const [currentBattle, setCurrentBattle] = useState<Battle | null>(null);\n  const [battleId] = useState<bigint | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // Set contract address (you'll need to update this after deployment)\n  useEffect(() => {\n    // Replace with your deployed contract address\n    setContractAddress(\n      '0x0000000000000000000000000000000000000000' as `0x${string}`\n    );\n  }, []);\n\n  // Check wallet connection on mount\n  useEffect(() => {\n    checkConnection();\n  }, []);\n\n  // Load Samurai data when connected\n  useEffect(() => {\n    if (connectedAddress) {\n      loadSamurai();\n      loadBalance();\n    }\n  }, [connectedAddress]);\n\n  const checkConnection = async () => {\n    const address = await getConnectedAddress();\n    setConnectedAddress(address);\n  };\n\n  const loadBalance = async () => {\n    if (!connectedAddress) return;\n    try {\n      const bal = await getBalance(connectedAddress as `0x${string}`);\n      setBalance(bal);\n    } catch (error) {\n      console.error('Failed to load balance:', error);\n    }\n  };\n\n  const loadSamurai = async () => {\n    if (!connectedAddress) return;\n    try {\n      const samuraiData = await getSamurai(connectedAddress as `0x${string}`);\n      setSamurai(samuraiData as Samurai);\n    } catch (error) {\n      console.error('Failed to load Samurai:', error);\n    }\n  };\n\n  const handleConnect = async () => {\n    setLoading(true);\n    try {\n      const address = await connectWallet();\n      setConnectedAddress(address);\n      setMessage('Wallet connected successfully!');\n    } catch (error) {\n      setMessage('Failed to connect wallet');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDisconnect = () => {\n    disconnectWallet();\n    setConnectedAddress(null);\n    setSamurai(null);\n    setMessage('Wallet disconnected');\n  };\n\n  const handleCreateSamurai = async () => {\n    if (!samuraiName.trim()) {\n      setMessage('Please enter a Samurai name');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await createSamurai(samuraiName);\n      setMessage('Samurai created successfully!');\n      await loadSamurai();\n      setSamuraiName('');\n    } catch (error) {\n      setMessage('Failed to create Samurai');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpgradeStat = async (stat: number) => {\n    setLoading(true);\n    try {\n      await upgradeStat(stat);\n      setMessage('Stat upgraded successfully!');\n      await loadSamurai();\n    } catch (error) {\n      setMessage('Failed to upgrade stat');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStartBattle = async () => {\n    if (!opponentAddress.trim()) {\n      setMessage('Please enter opponent address');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await startBattle(opponentAddress as `0x${string}`, betAmount);\n      setMessage('Battle started!');\n      setOpponentAddress('');\n      setBetAmount('0.01');\n    } catch (error) {\n      setMessage('Failed to start battle');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExecuteTurn = async () => {\n    if (battleId === null) {\n      setMessage('No active battle');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await executeTurn(battleId);\n      setMessage('Turn executed!');\n      // Reload battle data\n      const battleData = await getBattle(battleId);\n      setCurrentBattle(battleData as Battle);\n    } catch (error) {\n      setMessage('Failed to execute turn');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!connectedAddress) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-red-900 via-red-800 to-red-900 flex items-center justify-center\">\n        <div className=\"bg-white/10 backdrop-blur-md rounded-lg p-8 text-center\">\n          <h1 className=\"text-4xl font-bold text-white mb-8\">\n            ⚔️ Ronin Rivals ⚔️\n          </h1>\n          <p className=\"text-white/80 mb-8\">\n            Connect your Ronin Waypoint wallet to begin your Samurai journey\n          </p>\n          <button\n            onClick={handleConnect}\n            disabled={loading}\n            className=\"bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:opacity-50\"\n          >\n            {loading ? 'Connecting...' : 'Connect Wallet'}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-red-900 via-red-800 to-red-900 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"bg-white/10 backdrop-blur-md rounded-lg p-6 mb-6\">\n          <div className=\"flex justify-between items-center\">\n            <h1 className=\"text-3xl font-bold text-white\">\n              ⚔️ Ronin Rivals ⚔️\n            </h1>\n            <div className=\"text-right\">\n              <p className=\"text-white/80 text-sm\">\n                Connected: {connectedAddress?.slice(0, 6)}...\n                {connectedAddress?.slice(-4)}\n              </p>\n              <p className=\"text-white/80 text-sm\">\n                Balance: {parseFloat(balance) / 1e18} RON\n              </p>\n              <button\n                onClick={handleDisconnect}\n                className=\"text-red-300 hover:text-red-100 text-sm\"\n              >\n                Disconnect\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Message */}\n        {message && (\n          <div className=\"bg-white/10 backdrop-blur-md rounded-lg p-4 mb-6\">\n            <p className=\"text-white text-center\">{message}</p>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Samurai Section */}\n          <div className=\"bg-white/10 backdrop-blur-md rounded-lg p-6\">\n            <h2 className=\"text-2xl font-bold text-white mb-4\">\n              🗡️ Your Samurai\n            </h2>\n\n            {!samurai?.exists ? (\n              <div className=\"space-y-4\">\n                <p className=\"text-white/80\">\n                  Create your Samurai to begin your journey\n                </p>\n                <input\n                  type=\"text\"\n                  value={samuraiName}\n                  onChange={(e) => setSamuraiName(e.target.value)}\n                  placeholder=\"Enter Samurai name\"\n                  className=\"w-full p-3 rounded-lg bg-white/20 text-white placeholder-white/60 border border-white/20\"\n                />\n                <button\n                  onClick={handleCreateSamurai}\n                  disabled={loading || !samuraiName.trim()}\n                  className=\"w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:opacity-50\"\n                >\n                  {loading ? 'Creating...' : 'Create Samurai'}\n                </button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"bg-white/5 rounded-lg p-4\">\n                  <h3 className=\"text-xl font-bold text-white mb-2\">\n                    {samurai.name}\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-2 text-sm text-white/80\">\n                    <p>Level: {samurai.level.toString()}</p>\n                    <p>Experience: {samurai.experience.toString()}</p>\n                    <p>Skill Points: {samurai.skillPoints.toString()}</p>\n                    <p>Battles Won: {samurai.battlesWon.toString()}</p>\n                    <p>Battles Lost: {samurai.battlesLost.toString()}</p>\n                  </div>\n                </div>\n\n                <div className=\"bg-white/5 rounded-lg p-4\">\n                  <h4 className=\"text-lg font-bold text-white mb-2\">Stats</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80\">\n                        Strength: {samurai.strength.toString()}\n                      </span>\n                      <button\n                        onClick={() => handleUpgradeStat(0)}\n                        disabled={loading || samurai.skillPoints === 0n}\n                        className=\"bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm disabled:opacity-50\"\n                      >\n                        +2\n                      </button>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80\">\n                        Defense: {samurai.defense.toString()}\n                      </span>\n                      <button\n                        onClick={() => handleUpgradeStat(1)}\n                        disabled={loading || samurai.skillPoints === 0n}\n                        className=\"bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm disabled:opacity-50\"\n                      >\n                        +1\n                      </button>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80\">\n                        Speed: {samurai.speed.toString()}\n                      </span>\n                      <button\n                        onClick={() => handleUpgradeStat(2)}\n                        disabled={loading || samurai.skillPoints === 0n}\n                        className=\"bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm disabled:opacity-50\"\n                      >\n                        +1\n                      </button>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80\">\n                        Health: {samurai.health.toString()}\n                      </span>\n                      <button\n                        onClick={() => handleUpgradeStat(3)}\n                        disabled={loading || samurai.skillPoints === 0n}\n                        className=\"bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm disabled:opacity-50\"\n                      >\n                        +10\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Battle Section */}\n          <div className=\"bg-white/10 backdrop-blur-md rounded-lg p-6\">\n            <h2 className=\"text-2xl font-bold text-white mb-4\">\n              ⚔️ Battle Arena\n            </h2>\n\n            {samurai?.exists ? (\n              <div className=\"space-y-4\">\n                <div className=\"bg-white/5 rounded-lg p-4\">\n                  <h4 className=\"text-lg font-bold text-white mb-2\">\n                    Start New Battle\n                  </h4>\n                  <input\n                    type=\"text\"\n                    value={opponentAddress}\n                    onChange={(e) => setOpponentAddress(e.target.value)}\n                    placeholder=\"Opponent address (0x...)\"\n                    className=\"w-full p-3 rounded-lg bg-white/20 text-white placeholder-white/60 border border-white/20 mb-3\"\n                  />\n                  <input\n                    type=\"number\"\n                    value={betAmount}\n                    onChange={(e) => setBetAmount(e.target.value)}\n                    placeholder=\"Bet amount (RON)\"\n                    step=\"0.01\"\n                    min=\"0.01\"\n                    max=\"1\"\n                    className=\"w-full p-3 rounded-lg bg-white/20 text-white placeholder-white/60 border border-white/20 mb-3\"\n                  />\n                  <button\n                    onClick={handleStartBattle}\n                    disabled={loading || !opponentAddress.trim()}\n                    className=\"w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:opacity-50\"\n                  >\n                    {loading ? 'Starting Battle...' : 'Start Battle'}\n                  </button>\n                </div>\n\n                {currentBattle && (\n                  <div className=\"bg-white/5 rounded-lg p-4\">\n                    <h4 className=\"text-lg font-bold text-white mb-2\">\n                      Active Battle\n                    </h4>\n                    <div className=\"space-y-2 text-sm text-white/80\">\n                      <p>\n                        Player 1 Health:{' '}\n                        {currentBattle.player1Health.toString()}\n                      </p>\n                      <p>\n                        Player 2 Health:{' '}\n                        {currentBattle.player2Health.toString()}\n                      </p>\n                      <p>\n                        Current Turn:{' '}\n                        {currentBattle.currentTurn === connectedAddress\n                          ? 'Your turn'\n                          : \"Opponent's turn\"}\n                      </p>\n                      <p>Turn Count: {currentBattle.turnCount.toString()}</p>\n                    </div>\n                    {currentBattle.currentTurn === connectedAddress && (\n                      <button\n                        onClick={handleExecuteTurn}\n                        disabled={loading}\n                        className=\"w-full mt-3 bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors disabled:opacity-50\"\n                      >\n                        {loading ? 'Executing...' : 'Execute Turn'}\n                      </button>\n                    )}\n                  </div>\n                )}\n              </div>\n            ) : (\n              <p className=\"text-white/80\">\n                Create a Samurai first to enter battles\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}